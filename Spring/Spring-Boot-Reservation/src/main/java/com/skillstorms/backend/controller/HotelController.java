package com.skillstorms.backend.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.skillstorms.backend.model.Hotel;
import com.skillstorms.backend.model.ResourceNotFoundException;
import com.skillstorms.backend.repository.HotelRepository;

@Controller // This means that this class is a Controller
@CrossOrigin(origins = "*")
@RequestMapping(path="/hotels") // This means URL's start with /demo (after Application path)
public class HotelController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private HotelRepository hotelRepository;

  @PostMapping(path="") // Map ONLY POST Requests
  public @ResponseBody Hotel create(@Valid @RequestBody Hotel hotel) {
  	return hotelRepository.save(hotel);
  }
  @GetMapping(path="")
  public @ResponseBody List<Hotel> findAll() {
    // This returns a JSON or XML with the users
    return hotelRepository.findAll();
  }
  @GetMapping(path="/{id}")
  public @ResponseBody Hotel findById(@PathVariable int id) {
  	Optional<Hotel> hotel = hotelRepository.findById(id);
  	if (hotel.isPresent()) {
  		return hotel.get();
  	}
  	else {
  		throw new ResourceNotFoundException();
  	}
  }
  @GetMapping(path="/name/{name}")
  public @ResponseBody List<Hotel> findByName(@PathVariable String name) {
  	return hotelRepository.findByHotelName(name);
  }
}