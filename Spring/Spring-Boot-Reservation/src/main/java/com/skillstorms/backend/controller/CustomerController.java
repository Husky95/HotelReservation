package com.skillstorms.backend.controller;

import java.util.Set;

import javax.validation.Valid;

import org.springframework.data.domain.Pageable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.skillstorms.backend.model.Customer;
import com.skillstorms.backend.repository.CustomerRepository;
import com.skillstorms.backend.repository.ReservationRepository;
import com.skillstorms.backend.model.Reservation;

@RestController // @RestController = @Controller + @ResponseBody
@CrossOrigin("*") // If you don't like CorsFilter, you're in luck. They do the same thing
@RequestMapping(path="/customer") // This means URL's start with /demo (after Application path)
public class CustomerController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private CustomerRepository customerRepository;
  @Autowired
  private ReservationRepository reservationRepository;

  @PostMapping(path="/add")
  public Customer create(@RequestBody Customer customer) {
	 System.out.println("Customer add call"); 
	 //Set<Reservation> newReservation = customer.getReservationID();
	 //Reservation temp = newReservation.iterator().next();
	 //Customer newCustomer = customer;
	 
	 //System.out.println(newReservation.iterator().next()); 
	 //reservationRepository.save(newReservation.iterator().next());
	 
	 //customerRepository.save(customer);
     //return customer;
	 return customerRepository.save(customer);
  }
  
  @GetMapping(path="/hello")
  public @ResponseBody String Hello() {
    // This returns a JSON or XML with the users
    return "Helo";
  }
  @GetMapping(path="/all")
  //public Page<Customer> getAllCustomer(Pageable pageable) {
      //return customerRepository.findAll(pageable);
  //}
  public @ResponseBody Iterable<Customer> getAllCustomers() {
    // This returns a JSON or XML with the users
    return customerRepository.findAll();
  }
}